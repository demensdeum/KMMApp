/**
 * Newsapi
 *
 * newsapi.org
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.ArticlesRoot

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class ArticlesApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonSerializer) {

    /**
     * Articles List
     * 
     * @param q query 
     * @param pageSize maximal articles 
     * @param language Language in two letters 
     * @param page page 
     * @param apiKey API key 
     * @return ArticlesRoot
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun articlesList(q: kotlin.String, pageSize: kotlin.Int, language: kotlin.String, page: kotlin.Int, apiKey: kotlin.String): HttpResponse<ArticlesRoot> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        pageSize?.apply { localVariableQuery["pageSize"] = listOf("$pageSize") }
        language?.apply { localVariableQuery["language"] = listOf("$language") }
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        apiKey?.apply { localVariableQuery["apiKey"] = listOf("$apiKey") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/everything",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
